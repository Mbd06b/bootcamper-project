def testPassingTestsAreBelowThresholdPercent(threshold){
    def totalTests = 0
    def totalFailures = 0
    
    //Find all XML files in the target/surefire-reports directory
    def testFiles = findFiles(glob: 'target/surefire-reports/TEST-*.xml')
    
    testFiles.each { file ->
        def xmlContent = readFile file.path
        def testResults = new XmlSlurper().parseText(xmlContent)
        totalTests += testResults.attributes().get("tests") as int
        totalFailures += testResults.attributes().get("failures") as int
    }
    if(totalTests > 0){
        def passingTests = totalTests - totalFailures
        def passPercentage = (passingTests / totalTests) * 100
        
        if (passPercentage > threshold) {
            error "Pass percentage ${passPercentage} is greater than ${threshold}%. Failing the build. Run: totalTests: ${totalTests} totalFailures: ${totalFailures} "
        } else {
            echo  "Pass percentage ${passPercentage} is below ${threshold}%.  Run: totalTests: ${totalTests} totalFailures: ${totalFailures}"
        }
    } else {
        echo "No tests were executed."
    }
}


pipeline {
    agent {
    	kubernetes {
            cloud 'kubernetes'
            yaml '''
    apiVersion: v1
    kind: Pod
    spec:
     nodeSelector:
        node-type: edge
     containers:
     - name: maven
       image: maven:3.6.3-jdk-11
       command:
       - cat
       tty: true
       volumeMounts:
       - name: maven-settings-volume
         mountPath: /usr/share/maven/ref/settings.xml
     volumes:
      - name: maven-settings-volume
        configMap:
         # Provide the name of the ConfigMap containing the files you want
         # to add to the container
         name: ghmbd06b-maven-settings
    '''
        }
    }
    
    stages {
    
        stage ('Compile') {
                
            steps {
             	container('maven'){
        	       script {
                        withMaven() {
                            sh 'mvn clean compile -fae'
                        }
                    }
                 }
            }
        }
        
        stage ('Deploy Shared Artifacts') {
            when {
                anyOf {
                    changeset "pom.xml"
                    changeset "web-automatation-testing/*"
                }
            }
            steps {
                container('maven'){
        	        script {
                          echo "Deploy parent pom"
                          withMaven(mavenSettingsConfig: '213cd337-844e-4a32-8a6a-868768f6664f') {
                            //skipping tests because we don't want to run the tests that we are packaging
                            sh 'mvn deploy --non-recursive'
                          }
                          dir("web-automation-testing") {
                              echo "Building Common Tests Jar"
                              withMaven(mavenSettingsConfig: '213cd337-844e-4a32-8a6a-868768f6664f') {
                                //skipping tests because we don't want to run the tests that we are packaging
                                sh 'mvn deploy -DskipTests'
                              }
                           }
        	       }
                }
            }
                    
        }
 
        stage ('Unit Test') {
    		parallel {
    		    stage ('Verify Start Task') {
    		        steps {
    		            container('maven'){
        	                script {
                              // steps that will throw an error, but not fail the build if they do
                    		    dir("mgl-webapp"){
                                    try {
                                         withMaven() {
                                             sh 'mvn test --fail-never'
                                         } 
                                    } catch (Exception e){
                                        //do nothing with failed tests we're checking learning module setup, not the module itself
                                    } finally {
                                        testPassingTestsAreBelowThresholdPercent(45);
                                    }
        		               }
        	                }        
        	            }        
    		         }
    		    }
    		    
    		    stage ('jacoco task 2-1') {
    		        steps {
    		            container('maven'){
        	                script {
            		            dir("mgl-webapp_task2-1") {
                                    try {
                                         withMaven() {
                                             sh 'mvn test --fail-never'
                                         } 
                                    } catch (Exception e){
                                        //do nothing with failed tests we're checking learning module setup, not the module itself
                                    } finally {
                                        testPassingTestsAreBelowThresholdPercent(55);
                                    }
            		            }
        	                }
    		            }
    		       }
    		    }
    		}
        }
        
        stage ('Integration Test') {
            steps {
                container('maven'){
        	       script {
                        dir("mgl-webapp_review") {
                            
                            echo "On Integration Test stage"
                            withMaven(mavenSettingsConfig: '213cd337-844e-4a32-8a6a-868768f6664f') {
                                sh 'mvn integration-test --fail-never'
                            }
                        }
        	       }
                }
            }
        }
    
        stage ('QA Scan') {
            steps {
                echo "On Linting Stage";
                 container('maven'){
        	       script {
                        dir("mgl-webapp_review") {
                            
                            withSonarQubeEnv('ee-sonarqube') {
                                // Your build and analysis steps
                                sh 'mvn clean verify sonar:sonar -Dmaven.test.failure.ignore=true'
                            }
                        }
        	    }  }
            }
        }
        
        stage ('Deploy') {
            steps {
                echo "Deploy Stage"
            }
        }
        
        
    }
    
    post {
        always {
            container('maven') {
                junit(
                    allowEmptyResults: true,
                    testResults: '**/test-reports/*.xml'
                )
                cucumber '**/*cucumber-report.json'
            }
        }
    }
}
