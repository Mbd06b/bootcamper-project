/**
*  Helpful Learning links:
*  - https://devopscube.com/jenkins-multibranch-pipeline-tutorial/
*
*/

pipeline{

    agent any
    
   // TODO 'any' is fine for development purposes
   //agent {
   //   node {
   //     label 'master'
   //   }
   // }

    options {
        buildDiscarder logRotator( 
            daysToKeepStr: '90', 
            numToKeepStr: '10'
        )
    }

    stages {

        stage ('Setup') {
            
            steps {
               
                cleanWs()
                sh """
                echo "Cleaned Up Workspace For Project"
                """ 
                
                git url: 'https://github.com/Mbd06b/bootcamper-project.git',
                branch: 'feature-mgl-crud',
                credentialsId: 'Ethosengine_Jenkins_SSH'
                
                 withMaven() {
                    sh 'mvn clean compile -fae'
                 }
            }
        }
        
    stage ('Deploy Shared Artifacts') {
        when {
            anyOf {
                changeset "pom.xml"
                changeset "web-automatation-testing/*"
            }
          }
        steps {
              echo "Deploy parent pom"
              withMaven(mavenSettingsConfig: '59f1c14a-2dc0-4bbd-8a9d-80b901007e0d') {
                //skipping tests because we don't want to run the tests that we are packaging
                sh 'mvn deploy --non-recursive'
              }
              dir("web-automation-testing") {
                  echo "Building Common Tests Jar"
                  withMaven(mavenSettingsConfig: '59f1c14a-2dc0-4bbd-8a9d-80b901007e0d') {
                    //skipping tests because we don't want to run the tests that we are packaging
                    sh 'mvn deploy -DskipTests'
                  }
               }
        }
                
    }
    stage ('Unit Test Stage') {
			
		parallel {

		    stage ('Task 0 Test') {

		        steps {
		            catchError( buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
		        
                   // steps that will throw an error, but not fail the build if they do
            		    dir("mgl-webapp"){
        		            withMaven() {
                                sh 'mvn test -fae'
                           }  
		               }
    		     }
		    }
		    }
		    
		    stage ('Task 1 Test') {
		        steps {
		            dir("mgl-webapp_task1-0") {
		                script{
    		                withMaven() {
    		                    try {
    		                    sh 'mvn test -fae'
    		                       currentBuild.result = "SUCCESS"
    		                    } catch (Exception e){

            		            }
    		                }
		                }
		            }
		       }
		    }
		    
		    stage ('Task 2 Test') {
		        steps {
		            dir('mgl-webapp_task2-0') {
		                script{
    		                withMaven() {
    		                    try {
    		                    sh 'mvn test -fae'
    		                       currentBuild.result = "SUCCESS"
    		                    } catch (Exception e){

            		            }
    		                }
		                }
		            }
		       }
		    }
		    
		    stage ('Task 2.1 Test') {
		        steps {
		            dir('mgl-webapp_task2-1') {
		                script{
    		                withMaven() {
    		                    try {
    		                    sh 'mvn test -fae'
    		                       currentBuild.result = "SUCCESS"
    		                    } catch (Exception e){

            		            }
    		                }
		                }
		            }
		       }
		    }
		    
		    stage ('Review Task Test') {
            steps {
                dir("mgl-webapp_review") {
                    echo "Unit Testing Review Module"
                    withMaven(mavenSettingsConfig: '59f1c14a-2dc0-4bbd-8a9d-80b901007e0d') {
                        sh 'mvn test -fae'
                    }
                }
            }
        }
		}
    }
    		   
        stage ('Integration Test Stage') {
            steps {
                dir("mgl-webapp_review") {
                    echo "On Integration Test stage"
                    withMaven(mavenSettingsConfig: '59f1c14a-2dc0-4bbd-8a9d-80b901007e0d') {
                        sh 'mvn integration-test -fae'
                    }
                }
            }
        }
    
        stage ('Linting Stage') {
            steps {
                echo "On Listing Stage";
            }
        }
        
        stage ('Deploy Stage') {
            steps {
                echo "Deploy Stage"
            }
        }

    }//stages
    
    post {
	    always {
	      junit(
	        allowEmptyResults: true,
	        testResults: '**/test-reports/*.xml'
	      )
          cucumber '**/*cucumber-report.json'
          jacoco (
              exclusionPattern: '**/*Test*.class',
              runAlways: true, 
              sourceExclusionPattern: 'generated/**/*.java' )
	    }
	 }

}